@using MDivePlannerWeb.Models
@model DiveParamsModel

<div>
    <table class="mainTable">
        <tr>
            <td>
                <div class="levels">
                    <div class="label">Levels</div>
                    <table class="levelsTable">
                        <thead>
                            <tr>
                                <td class="header" style="width: 75px">Depth</td>
                                <td class="header" style="width: 95px">Time</td>
                                <td class="header">Gas O<span style="font-size: 12px">2</span>/He:</td>
                                <td class="header" style="width: 40px">Use</td>
                            </tr>
                        </thead>
                        <tbody class="body">
                            @for (int i = 0; i < Model.DiveLevels.Length; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.TextBoxFor(m => m.DiveLevels[i].Depth, new { @class = "text-box" })
                                        m
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.DiveLevels[i].Time, new { @class = "text-box" })
                                        mins
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.DiveLevels[i].Gas.PpO2, new { @class = "text-box" })
                                        /
                                        @Html.TextBoxFor(m => m.DiveLevels[i].Gas.PpHe, new { @class = "text-box" })
                                        %
                                    </td>
                                    <td style="text-align: center; vertical-align: central">
                                        @Html.CheckBoxFor(m => m.DiveLevels[i].UseLevel)
                                        <input type="hidden" value="@Model.DiveLevels[i].IsValid.ToString()" class="levelValid" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div>
                        <span class="field-validation-error">@{ @Model.LevelsValidationMessage }</span>
                    </div>
                </div>
            </td>
            <td>
                <div class="decoLevels">
                    <div class="label">Deco Gases</div>
                    <table class="levelsTable">
                        <thead>
                            <tr>
                                <td class="header" style="width: 90px">Depth</td>
                                <td class="header">Gas O<span style="font-size: 12px">2</span>/He:</td>
                                <td class="header" style="width: 40px">Use</td>
                            </tr>
                        </thead>
                        <tbody class="body">
                            @for (int i = 0; i < Model.DecoLevels.Length; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.TextBoxFor(m => m.DecoLevels[i].Depth, new { @class = "text-box" })
                                        m
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m.DecoLevels[i].Gas.PpO2, new { @class = "text-box" })
                                        /
                                        @Html.TextBoxFor(m => m.DecoLevels[i].Gas.PpHe, new { @class = "text-box" })
                                        %
                                    </td>
                                    <td style="text-align: center; vertical-align: central">
                                        @Html.CheckBoxFor(m => m.DecoLevels[i].UseLevel)
                                        <input type="hidden" value="@Model.DecoLevels[i].IsValid.ToString()" class="levelValid" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div>
                        <span class="field-validation-error">@{ @Model.DecoLevelsValidationMessage }</span>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td class="otherParams">
                <label asp-for="Interval">Interval:</label>
                <br />
                @Html.TextBoxFor(m => m.Interval, new { @class = "text-box" })
                <br />
                @Html.ValidationMessageFor(m => m.Interval)
                <br />
                <label asp-for="WaterDensity">Water Density:</label>
                <br />
                @Html.TextBoxFor(m => m.WaterDensity, new { @class = "text-box" })
                <br />
                @Html.ValidationMessageFor(m => m.WaterDensity)
                <br />
                <label asp-for="Interval">Algorythm:</label>
                <br />
                @Html.DropDownListFor(m => m.Algorythm, Model.Algorythms, new { @class = "dropdown" })
                <br />
                <br />
                <label asp-for="Interval">Min Deco stop:</label>
                <br />
                <div style="padding-top: 3px">
                    @Html.RadioButtonFor(m => m.MinDecoStopTime, Model.MinDecoStops[0].Value)
                    <span>@Model.MinDecoStops[0].Text</span>
                    &nbsp;&nbsp;
                    @Html.RadioButtonFor(m => m.MinDecoStopTime, Model.MinDecoStops[1].Value)
                    <span>@Model.MinDecoStops[1].Text</span>
                </div>
            </td>
            <td class="otherParams">
                <label asp-for="Interval">Max Descent / Ascent Speed:</label>
                <br />
                @Html.TextBoxFor(m => m.DescentSpeed, new { @class = "text-box textBoxShort" })
                /
                @Html.TextBoxFor(m => m.AscentSpeed, new { @class = "text-box textBoxShort" })
                &nbsp;
                metters/min
                <br />
                @Html.ValidationMessageFor(m => m.DescentSpeed)
                &nbsp;
                @Html.ValidationMessageFor(m => m.AscentSpeed)
                <br />
                <label asp-for="Interval">Gradient Factor Low / High:</label>
                <br />
                @Html.TextBoxFor(m => m.GradFactorLow, new { @class = "text-box textBoxShort" })
                /
                @Html.TextBoxFor(m => m.GradFactorHigh, new { @class = "text-box textBoxShort" })
                &nbsp;
                %
                <br />
                @Html.ValidationMessageFor(m => m.GradFactorLow)
                &nbsp;
                @Html.ValidationMessageFor(m => m.GradFactorHigh)
                <br />
                <label asp-for="Interval">Safety stop Depth / Time:</label>
                <br />
                @Html.TextBoxFor(m => m.SafetyStopDepth, new { @class = "text-box textBoxShort" })
                /
                @Html.TextBoxFor(m => m.SafetyStopTime, new { @class = "text-box textBoxShort" })
                &nbsp;
                metters / mins
                <br />
                @Html.ValidationMessageFor(m => m.SafetyStopDepth)
                &nbsp;
                @Html.ValidationMessageFor(m => m.SafetyStopTime)

                <br />
                <label asp-for="Interval">RMV Bottom / Deco:</label>
                <br />
                @Html.TextBoxFor(m => m.RmvBottom, new { @class = "text-box textBoxShort" })
                /
                @Html.TextBoxFor(m => m.RmvDeco, new { @class = "text-box textBoxShort" })
                &nbsp;
                litters
                <br />
                @Html.ValidationMessageFor(m => m.RmvBottom)
                &nbsp;
                @Html.ValidationMessageFor(m => m.RmvDeco)
                <br />
            </td>
        </tr>
    </table>

    @Html.ValidationSummary(true)

    <input type="hidden" id="DiveParamsValid" value="@{ @Model.IsModelValid.ToString().ToLower() }" />

    <script>
        var direParams =
        {
            depth: @Model.DiveLevels[0].Depth,
            diveTime: @Model.DiveLevels[0].Time
        };
    </script>
</div>